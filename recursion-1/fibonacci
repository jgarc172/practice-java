The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. The first two values 
in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values, so 
the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the 
nth fibonacci number, with n=0 representing the start of the sequence.

fibonacci(0) → 0
fibonacci(1) → 1
fibonacci(2) → 1

public int fibonacci(int n) {
  /*
    returns the nth fibonacci number by repeatedly adding the two previous 
    fibonacci numbers
  */
  
  if (n < 2){
    return n;
  }
  return fibonacci(n-1) + fibonacci(n-2);
}

/*
Translated description:
  fibonacci takes an int n and returns the nth fibonacci number by repeatedly 
  adding the two previous fibonacci numbers.  The first two fibonacci numbers 
  are 0 and 1
  
Intermediate translations:
  - base case
    fibonacci number is n when n < 2
  - the two previous numbers
    n-1 and n-1
  - the two previous fibonacci numbers
    fibonacci(n-1) and fibonacci(n-2)
    
Translated recursive definition, fibonacci(n):
  fibonacci is n when n is < 2
  fibonacci is the sum of the two previous fibonacci numbers
  
Solution:
  return n when n < 2
  else return fibonacci(n-1) + fibonacci(n-2)
  
Fibonacci iterative definition, fibonacci(n):
  if n < 2
    return n
  else n >= 2
    fib is 0
    fib1 is 1
    fib2 is 0
    repeat the following n - 2 times
      fib is fib1 + fib2
      fib2 is fib1
      fib1 is fib
  return fib

*/
