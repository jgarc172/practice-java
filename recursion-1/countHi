Given a string, compute recursively (no loops) the number of times lowercase "hi" appears in the string.

countHi("xxhixx") → 1
countHi("xhixhix") → 2
countHi("hi") → 1

public int countHi(String str) {
  /*
    returns the count of "hi" in str, by repeatedly adding a 1 to the count
    when "hi" matches the the first two characters of str and by replacing str
    with the remaining characters after the first character
      1 + countHi(remaining)
    */
  if (str.length() < 2){
    return 0;
  }
  String firstTwo = str.substring(0,2);
  String remaining = "";
  if (str.length() > 2){
    remaining = str.substring(1);
  }
  if (firstTwo.equals("hi")){
    return 1 + countHi(remaining);
  }
  return countHi(remaining);
}

/*
Translated description:
  countHi takes a string str and returns an int as the count of "hi" in str, by
  repeatedly comparing the front two characters with "hi" and by replacing str
  with the remaining substring of str without the first character
  
Intermediate translations:
  - accessing the first two characters of str
     str.substring(0, 2)
  - the remaining substring of str
      str.substring(1)  for length > 2
      "" for length <= 2
      
Translated recursive definition of countHi(str):
  count is 0 when length of str is < 2
  if front two is 'hi' count is 1 + countHi of remaining substring
  else count is countHi of remaining substring
  returns count
  
Solution:
  return 0 if length of str is < 2
  remaining is "" for str length <= 2 or remaining is str.substring(2)
  if str.substring(0,2).equals('hi'), return 1 + countX(remaining)
  else return countX(remaining)
  
Translated iterative definition of count8(n):
  count is 0
  while str is not ""
    if front two are 'hi', increment count
    replace str with remaining substring
  return count
*/

