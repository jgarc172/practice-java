We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and 
so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number 
of rows.

triangle(0) → 0
triangle(1) → 1
triangle(2) → 3

public int triangle(int rows) {
  /*
    returns the number of blocks in a triangle of rows of blocks by adding
    each row of blocks
  */
 
 if (rows == 0){
   return 0;
 }
 return rows + triangle(rows-1); 
}

/*
Translated description:
  triangle takes an int rows that represents a triangle of rows of blocks and 
  returns an int as the total number of blocks, by repeatedly adding each row 
  of blocks and by replacing rows with the next smaller number rows-1
  
Intermediate translations:
  - rows -> number of rows
  - the bottom row -> has rows blocks
  - the next row -> has rows-1 blocks
  - the top row -> has 1 row
  - a triangle of 3 rows looks like this
    []
   [][]
  [][][]
  
Translated recursive definition of triange(rows):
  total is 0 when rows is 0
  total is rows + triange(rows-1)
  return total
  
Solution:
  return 0 if rows is 0
  return rows + triangle(rows-1)
  
Translated iterative definition of triangle(rows):
  total is 0
  for each decreasing value of rows, from rows to 0, repeat the following:
    add rows to the total
  return total
  
  */
