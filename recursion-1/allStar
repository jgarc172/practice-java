Given a string, compute recursively a new string where all the adjacent chars are now separated by a "*".

allStar("hello") → "h*e*l*l*o"
allStar("abc") → "a*b*c"
allStar("ab") → "a*b"

public String allStar(String str) {
  /*
    return a new string by repleatedly copying the first character in str and 
    the character "*" to the new string of the remaining substring of str, 
    except for the last character
  */

  if (str.length() <= 1){
    return str;
  }
  return str.charAt(0) + "*" + allStar(str.substring(1));

}

/*
Translated description:
  allStar takes a string str and returns a new string, by repleatedly copying 
  the first character in str and the character "*" to the new string of the 
  remaining substring of str, except for the last character
  
Intermediate translations:
  - base case
    new string is "" when str is ""
  - a new string can be created by the concatenation operator (+)
  - str is composed of two components:
      first character + remaining substring of str
  - accessing the first character of str
     str.charAt(0)
  - the remaining substring of str
      str.substring(1)  
  - the new string of the remaining substring of str
      allStar(str.substring(1))
  - copying the first character and the star to the new string
      str.charAt(0) + "*" + allStar(str.substring(1)) 

Translated recursive definition of allStar(str):
  new string is str when str length is 1 or less
  new string is first character + "*" + allStar of remaining string
  returns new string
  
Solution:
  return str if str.length() <= 1
  return str.charAt(0) + "*" + allStar(str.substring(1)
  
Translated iterative definition of allStar(nums):
  new string is ""
  for each character at index i, from 0 to str.lengt()-2
    add character and "*" to right of new string 
  add the last character to right of new string
  return new string
*/
