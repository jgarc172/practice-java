Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.

countX("xxhixx") → 4
countX("xhixhix") → 3
countX("hi") → 0

public int countX(String str) {
  /*
    returns the count of 'x' characters in the characters of str, by repeatedly
    adding a 1 when the first character in str matches 'x' and by replacing 
    str with the remaining substring
      1 + countX(remaining)
  */
  
  if (str.length() == 0){
    return 0;
  }
  
  char firstChar = str.charAt(0);
  String remaining = "";
  if (str.length() > 1 ){
    remaining = str.substring(1);
  }
  
  if (firstChar == 'x'){
    return 1 + countX(remaining);
  } else {
    return countX(remaining);
  }
}

/*
Translated description:
  countX takes a string str and returns an int as the count of lowercase 'x' 
  characters in the characters of str, by repeatedly accessing the first character
  in str and replacing str with the remaining substring of str
  
Intermediate translations:
  - accessing the first character of str
     str.charAt(0)
  - the remaining substring of str
      str.substring(1)  for length > 1
      "" for length 1
      
Translated recursive definition of countX(str):
  count is 0 when str is ""
  if first character is 'x' count is 1 + countX of remaining substring
  else count is countX of remaining substring
  returns count
  
Solution:
  return 0 if str is ""
  remaining is "" for str length 1 or remaining is str.substring(1)
  if str.charAt(0).equals('x'), return 1 + countX(remaining)
  else return countX(remaining)
  
Translated iterative definition of count8(n):
  count is 0
  while str is not ""
    if first character is 'x', increment count
    replace str with remaining substring
  return count
*/
