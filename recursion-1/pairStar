Given a string, compute recursively a new string where identical chars that are adjacent in the original string are 
separated from each other by a "*".

pairStar("hello") → "hel*lo"
pairStar("xxyy") → "x*xy*y"
pairStar("aaaa") → "a*a*a*a"

public String pairStar(String str) {
  /*
    returns a new string by repeatedly copying the first character of str to 
    the new string of the remaining substring; except, when the first character 
    is the same as the second character, adds both the first character and "*" 
    to the new string of the remaining substring
    
    firstChar + pairStar(str.substring(1))
    firstChar + "*" + pairStar(str.substring(1))
   */
 
 if (str.length() < 2){
   return str;
 }
 char firstChar = str.charAt(0);
 if (firstChar == str.charAt(1)){
   return firstChar + "*" + pairStar(str.substring(1));
 }
 return firstChar + pairStar(str.substring(1)); 

}

/*
Translated description:
  pairStand takes a string str and returns a new string, by repeatedly copying 
  the first character of str to the new string of the remaining substring; 
  except, when the first character is the same as the second character, adds 
  both the first character and "*" to the new string of the remaining substring
  
Intermediate translations:
  - two characters need to be accessed at a time, except for the last character
  - base case
    new string is str when str.length() < 2
  - a new string is created by the concatenation operator (+)
  - str can be represented by the concatenation of
      first character + remaining substring
  - first character and second character
      str.charAt(0) and str.charAt(1)
  - identical chars that are adjacent in the original string str
      str.charAt(0) == str.charAt(1)
  - remaining substring
      str.substring(1)
  - new string of remaining substring
      pairStar(str.substring(1))
      
Translated recursive definition of pairStar(str):
  new string is str when str.length() < 2
  if first char is the same as secon char 
    new string is first char + "*" + new string of remaining substring
  else 
    new string is first char + news string of remaining  substring
  return new string

Solution:
  return str when str.length() < 2
  firstChar is str.charAt(0)
  if firstChar == str.charAt(1)
    return firstChar + "*" + pairStar(str.substring(1))
  else return firstChar + pairStar(str.substring(1))

Translated iterative definition of pairStar(str):
  new string is ""
  for each character in str at index i (from 0 to str.length() - 1)
    firstChar is str.charAt(i)
    if i < str.length()-1 and firstChar == str.charAt(i+1)
      new string is new string + firstChar + "*"
    else
      new string is new string + firstChar
  return new string
  
*/
