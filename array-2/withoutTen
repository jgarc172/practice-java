Return a version of the given array where all the 10's have been removed. The remaining elements should shift left towards 
the start of the array as needed, and the empty spaces at the end of the array should be 0. 
So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.

withoutTen([1, 10, 10, 2]) → [1, 2, 0, 0]
withoutTen([10, 2, 10]) → [2, 0, 0]
withoutTen([1, 99, 10]) → [1, 99, 0]

public int[] withoutTen(int[] nums) {
/*
  returns a modified array by swapping all the non 10s to the front and 
  the 10s are replaced or changed to 0
*/ 

 for (int i=0; i <= nums.length - 1; i++){
   if (nums[i] == 10){
     // clear it and make it available for replacement
     nums[i] = 0;
     // find next non 10
     for (int j=i+1; j <= nums.length - 1; j++){
       if (nums[j] != 10){
         // swap values
         nums[i] = nums[j];
         nums[j] = 10;
         break;
       }
     }
   }
 }
 return nums;
}


/*
Translation of description:
  withoutTen takes an int array nums, modifies it and returns it by swapping
  all the non 10s to the front and the 10s are replaced or changed to 0
  
Intermediate translation:
  - for each element in nums, it repeats the following:
  1. identifies the location of the next element in the front that is a 10
     nums[i] == 10
     changes it to 0 in case it is not replaced
     nums[i] = 0
  2. then it finds the location of the next non 10
     nums[j] == 0
  3. it swaps the values at those two locations
     nums[i] = nums[j] and nums[j] = 10
  
Solution:
  for each element in nums from index i=0 to nums.length-1
    if element is 10, then
      sets it to 0
      finds the index of the next non 10
      swaps the values at those two locations
      
*/
