public int[] withoutTen(int[] nums) {
  // solution from description:
  // Return a version of the given array where all the 10's have been removed.
  
  // constraints:
  // remaining elements should shift left towards the start of the array as needed.
  // empty spaces a the end of the array should be 0
  
  // improved description or translation to pseudocode or code:
  
  // Given array nums -> int[] nums
  // i is the position (index) from 0 to end of array (length -1)
  // element value is nums[i]
  // a 10 -> element value is 10 -> true when nums[i] == 10
  // not a 10 -> element value is not 10 -> true when nums[i] != 10
  
  // all the 10's ->  all elements that are true for nums[i] == 10
  // remaining elements -> elements that are not a 10
  
  // towards the start of the array -> closer to index 0
  
  // shift -> means move a value from right to left or left to right
  // move a value -> read a value (copy) from one position then
  // write the value (paste) in another position
  // read a value (copy) -> the original value stays (copy)
  // write a value in a position -> the original value in the position is overritten.
  
  // summary for read and write:
  // read leaves a copy
  // write destroys whatever value was there before
  
  // shift left 
  // for j > i -> copy nums[j] to position i -> nums[i] = nums[j]
  // shift right
  // for j > i then copy nums[i] to position j -> nums[j] = nums[i]
  
  // means to copy an element that is not 10 and write it in a position where 
  // a 10 is located.  The 10 element is the first from the left.
  
  // shift left towards the start of the array as needed ->

  
  // identifiers:
  // in an array, the index, i, identifies positions of elements, from 0 to the length -1.
  // here we need to identify elements by their value, then remember their position, i.
  // an element is 10 -> nums[i] == 10, its position is i
  // an element is not 10 -> nums[i] != 10, its position is i.
  // we also need to identify a group of elements
  // if the elements are not together, the best we can do is to 
  // identify the first element from left (0)  or right (length - 1)
  
  // remove an element:
  // there is no such thing as removing an element
  // in a Java array or similar languages.
  // remove then means to replace its value with another value
  // remove the element with value 10 -> replace its value with value from
  // one of the "remaining elements"
  // example of replacing a 10 with another element's value
  // if nums[i] == 10 and nums[j] != 10 then nums[i] = nums[j]
  
  // translations:
  // identify elements that are 10 by their position starting->
  // 
  
  // position of next 10 element -> i
  // position of next element to shift left -> j
  
  // find position of first 10 to replace and ignore elements already in place
  int i = 0; // position of next 10 element
  while(i < nums.length && nums[i] != 10)
    i++;
  
  // now start shifting remaining elements
  for(int j = i + 1; j < nums.length; j++) {
    if(nums[j] != 10) {
     nums[i] = nums[j]; // shift left
     nums[j] = 0; // remove
     i++;
    }
  }
  // only empty spaces or 10 elements remaining
  // empty them
  while(i < nums.length){
    nums[i] = 0;
    i++;
  }
  return nums;
  
  
  /*
  

  int length = nums.length;
  int[] result = new int[length]; // initial values are 0
  
  int j = 0; // number of non 10 elements
  for (int i=0; i < length; i++){
    if (nums[i] != 10){
      result[j] = nums[i];
      j++;
    }
  }
  
  return result;
  */
}
