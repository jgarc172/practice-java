public int[] zeroMax(int[] nums) {
  /*
    Solution with restrictions:
  for each element at i in nums
    if the element is zero, get the maximum odd from remaining values 
    if the maximum odd is not zero, replace the current element's value
  */
  
  int lastIndex = nums.length-1;
  for (int i=0; i <= lastIndex; i++){
    if (nums[i] == 0){
      int max = maxOdd(nums, i+1, lastIndex);
      if (max != 0){
        nums[i] = max;
      }
    }
  }
  
  return nums;
}

public int maxOdd(int[] nums, int from, int to){
  int max = 0;
  for (int i=from; i <= to; i++){
    int value = nums[i];
    if (value > max && value % 2 != 0)  {
      max = value;
    }
  }
  return max;
}

/*
Solution from function definition:
  zeroMax takes an int array and returns an int array
  
Given:
  an int array nums
  
Solution from description without restrictions:
  Return a version of the given array
  
Restrictions:
  1. each zero value in the array is replaced by the largest odd value to the 
    right of the zero in the array
  2. If there is no odd value to the right of the zero, leave the zero as a zero
  3. replace with only odd values
  
Intermediate translations:
  - to the right of the zero at location i is a sub-array (slice) from
    i+1 to the last index
  
  nums [ ][ ][ ][ ][0][ ][ ][ ]
  to the right        [ ][ ][ ]
  
  1. if the current value is zero, get the maximum odd from right
     if maximum odd is not zero, replace the current value, continue
  2. else do nothing, continue
  3. odd value -> true if value % 2 != 0
  
Solution without restrictions:
  return nums;
  
Solution with restrictions:
  for each element at i in nums
    if the element is zero, get the maximum odd from remaining values strting at i+1
    if the maximum odd is not zero, replace the current element's value
    else ignore
    
*/
