Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right 
of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero.

zeroMax([0, 5, 0, 3]) → [5, 5, 3, 3]
zeroMax([0, 4, 0, 3]) → [3, 4, 3, 3]
zeroMax([0, 1, 0]) → [1, 1, 0]

public int[] zeroMax(int[] nums) {
  /*
    returns a modified aray by replacing each 0 in the array with the largest 
    odd value in the remaining array.
  
  */
  
  int lastIndex = nums.length-1;
  for (int i=0; i <= lastIndex; i++){
    if (nums[i] == 0){
      int max = maxOdd(nums, i+1);
      nums[i] = max;
    }
  }
  
  return nums;
}

public int maxOdd(int[] nums, int from){
  /*
    return the largest odd value in the array
    otherwise return 0
  */
  int max = 0;
  for (int i=from; i <= nums.length-1; i++){
    int value = nums[i];
    if (value % 2 != 0 && value > max)  {
      max = value;
    }
  }
  return max;
}

/*
Translation of description:
  zeroMax takes an int array nums, modifies it and returns it by replacing
  each 0 in the array with the largest odd value in the remaining array.  If there
  is no odd value, leave the zero as zero
  
Intermediate translation:
  - for each element in nums, it repeats the following:
  1. identifies the location of the next element in the front that is a 0
     nums[i] == 0
  2. then it finds the maximum odd value in the remaining array
     max = maxOdd(nums, i+1)
  3. it replaces its value
     nums[i] = max
     
Solution:
  for each element in nums from index i=0 to nums.length-1
    if element is 0
      finds the maximum odd value in the remaining array
      it replaces its value
    
*/
