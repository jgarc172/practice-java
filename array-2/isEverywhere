public boolean isEverywhere(int[] nums, int val) {
  /*
    Return true if the given value is in every pair in the array
    return false if for any one pair, none of the elements is the given value
  */
  
  for (int i=0; i <= nums.length - 2; i++){
    if ((nums[i] != val && nums[i+1] != val) ){
      return false;
    }
  }
  return true;
}

/*
From function definition and descritpion:
  given an int array nums and an int val, return true or false
  
Restrictions for
True:
  val is everywhere in every pair of values in nums
False:
  at least one pair in nums doesn't include val
  
Intermediate translations:
  every pair -> for all pairs of elements in nums
  at least one pair -> for one of the pairs of elements
  a pair -> nums[i] and nums[i+1]
  first pair -> nums[0] and nums[1]
  last pair -> nums[nums.length-2] and nums[nums.length-1]

Solution with restrictions:
  return true if every pair of values in nums has an element with value val
  or return false if one pair doesn't contain val in its elements
  
Translated solution:
  for each pair of elements from index i to nums.length-2
    return false if nums[i] is not val && nums[i+1] is not val
  return true

*/
