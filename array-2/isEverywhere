description:
We'll say that a value is "everywhere" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.

public boolean isEverywhere(int[] nums, int val) {
  /*
    Return true if the given value is in every pair in the array
    return false if for any one pair, none of the elements is the given value
  */
  
  for (int i=0; i <= nums.length - 2; i++){
    if ((nums[i] != val && nums[i+1] != val) ){
      return false;
    }
  }
  return true;
}

/*
Improved description:
  given an int array nums and an int val, return true if the given value 
  is in every pair in the array
  
Intermediate translations:
  - every pair -> must test all the pairs for condition to be true
    can test for false and stop when the first pair fails
  - test fails when val is not in any of the pair elements
  - when testing pairs of elements, the for loop must stop at nums.length - 2

Solution:
  return true if every pair of values in nums has an element with value val
  or return false if one pair doesn't contain val in its elements
  
Translated solution:
  for each pair of elements from index i to nums.length-2
    return false if nums[i] is not val && nums[i+1] is not val
  return true

*/
