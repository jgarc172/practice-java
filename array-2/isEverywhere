public boolean isEverywhere(int[] nums, int val) {
  /*
    Return true if the given value is everywhere in the array
  */
  
  for (int i=0; i <= nums.length - 2; i++){
    if (!(val == nums[i] || val == nums[i+1]) ){
      return false;
    }
  }
  return true;
}

/*
Solution from function name:
  isEverywhere is boolean
  with parameters, then
    true if val isEverywhere in array nums
    
Solution from description:
  Return true if the given value is everywhere in the array
  
Given:
  int array nums and int val
  
Restrictions:
  if for every pair of adjacent elements in the array, 
    at least one of the pair is that value
    
Solution without restrictions:
  the test will be on every element
  assume isThere is true
  for every element in array
     if the given value doesn't match the element, then isThere is false, break
     
Solution with restrictions:
  the test will be on every possible pair
  assume isThere is true
  for every pair in array
     if the given value doesn't match any element in pair, then isThere is false, break
  
Intermediate translations:
  iterating an array visits element from index, i, 0 to the last element
  to visit pairs in array:
    for each index, a pair is two elements at indexes i and i+1
    to fit the last pair, the index i has to be 1 less than the last index
  the given value matches the element -> val == nums[i] is true
  the given value matches any element in pair -> true when val == nums[i] and nums[i+1]
  
Hints:
  for these kinds of tests, it is better to assume true and then test for false
*/
