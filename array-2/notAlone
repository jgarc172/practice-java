We'll say that an element in an array is "alone" if there are values before and after it, and 
those values are different from it. Return a version of the given array where every instance of the given value 
which is alone is replaced by whichever value to its left or right is larger.

notAlone([1, 2, 3], 2) → [1, 3, 3]
notAlone([1, 2, 3, 2, 5, 2], 2) → [1, 3, 3, 5, 5, 2]
notAlone([3, 4], 3) → [3, 4]

public int[] notAlone(int[] nums, int val) {
 /*
 Solution:
  for every three elements in nums from 1 to last index - 1
    if element is the given value val and is alone
      replace it with the greater of the two other values
 */
 
 int lastIndex = nums.length - 1;
 for (int i=1; i <= lastIndex-1; i++){
   if (nums[i] == val){
    if (alone(nums[i-1], val, nums[i+1])){
      nums[i] = Math.max(nums[i-1], nums[i+1]);
    }
   }
 }
 return nums; 
}

public boolean alone(int a, int b, int c){
  /*
    element b is alone if it is not equal to a and not equal to c
  */
  return b != a && b != c;
}

/*
Translated description:
  notAlone takes an int array nums and an int val and returns a modified version 
  of nums.

Modification of nums:
  nums is modified by selecting three elements at a time and determining if 
  the middle element is alone, then replacing it by the greater of the left or
  right elements

Intermediate translations:
  - access three elements at a time using index i=1 to nums.length-2
  - an element is alone if it is not the same as its left and right elements
    nums[i] != nums[i-1] and nums[i] != nums[i+1]

  
Solution:
  define a function alone that takes three adjacent elements from nums and
    return true if the middle element is alone
  for every three elements in nums from 1 to nums.length-2
    if element is the given value val and is alone
      replace it with the greater of the two other values
  
*/
