public int[] notAlone(int[] nums, int val) {
 /*
 Solution:
  for every three elements in nums from 1 to last index - 1
    if element is the given value and is alone
      replace it with the greater of the two other values
 */
 
 int lastIndex = nums.length - 1;
 for (int i=1; i <= lastIndex-1; i++){
   if (nums[i] == val){
    if (alone(nums[i-1], val, nums[i+1])){
      nums[i] = Math.max(nums[i-1], nums[i+1]);
    }
   }
 }
 return nums; 
}

public boolean alone(int a, int b, int c){
  return b != a && b != c;
}

/*
Solution from function definition:
  notAlone takes an int array and an int and returns an int array
  
Given:
  an int array nums and a given int value val
  
Solution from descripton:
  Return a version of the given array 
  
Restrictions:
  1. every instance of the given value which is alone is replaced by 
    whichever value to its left or right is larger
  2. an element in an array is "alone" if there are different values 
    before and after it
  
Intermediate translations:
  - an element at location i with elements before and after it
    three elements in nums [i-1][i][i+1]
    exceptions: at the first index of nums, and at the last index of nums
  2. alone -> nums[i] is different than nums[i-1] and nums[i+1]
  3. if nums[i-1] > nums[i+1] then assign nums[i] = nums[i-1]
     otherwise assign nums[i] = nums[i+1]
  
Solution:
  for every three elements in nums from 1 to last index - 1
    if element is the given value and is alone
      replace it with the greater of the two other values
  
*/
