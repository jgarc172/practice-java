Given a non-empty array of ints, return a new array containing the elements from the original array that come after the last 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.

post4([2, 4, 1, 2]) → [1, 2]
post4([4, 1, 4, 2]) → [2]
post4([4, 4, 1, 2, 3]) → [1, 2, 3]

public int[] post4(int[] nums) {
  /*
    return a new array containing the elements from the original array that 
      come after the last 4 in the original array
      
      newArr[i] = nums[i + from]
  */
  
  int lastIndex = lastIndexAt(nums, 4);
  int from = lastIndex + 1;
  int length = nums.length - from;
  int[] newArr = new int[length];
  
  for (int i=0; i <= length-1; i++){
    newArr[i] = nums[i + from];
  }
  return newArr;
}

public int lastIndexAt(int[] nums, int element){
  int index = -1;
  for (int i=0; i <= nums.length-1; i++){
    if (nums[i] == element){
      index = i;
    }
  }
  return index;
}

/*
Translated description:
  post4 takes an int array nums and copies the subarray of elements located 
  after the last 4 in nums to a new int array newArr which is then returned
    newArr[i] = nums[i]

Intermediate translations:
  1. Identify the index location of the last 4 in nums.  This splits nums
     array into two subarrays (slices): from index 0 to index at 4;
     and from index after 4 to the last index of nums
     
nums    [ ][ ][ ][4][ ][ ][4][ ][ ][ ][ ]
slices  [  pre              ][  post    ]

     define a function lastIndexAt that returns the index of the last 4
  2. the index of the last 4 is used to determine the length of the new array
      lastIndex = lastIndexAt(nums, 4)
      new int[nums.length - (lastIndex+1)]
  3. copy all the elements from nums to new array from index+1 to length-1
     newArr[i] = nums[i + lastIndex + 1]
     
Solution:
  - define a function that locates the index of the last 4
  - use the function to get length and create new array
  - for each element in nums from lastIndex+1 to length - 1 
    copy the element to the corresponding index in new array
  

*/
