Return true if the group of N numbers at the start and end of the array are the same. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n=0 and n=2, and false for n=1 and n=3. You may assume that n is in the range 0..nums.length inclusive.

sameEnds([5, 6, 45, 99, 13, 5, 6], 1) → false
sameEnds([5, 6, 45, 99, 13, 5, 6], 2) → true
sameEnds([5, 6, 45, 99, 13, 5, 6], 3) → false

public boolean sameEnds(int[] nums, int len) {
  /*
  return true if the group of len numbers at the start of nums is the same as 
    the group of len numbers at the end of nums
  */
  
  for(int i=0; i<= len-1; i++){
    if (nums[i] != nums[nums.length - len + i]){
      return false;
    }
  }
  
  return true;
}

/*
Translated description:
  sameEnds takes an int array nums and an int len and returns a boolean
  true:
    if the group of len numbers at the start of nums is the same as the group of 
    len numbers at the end of nums
  false:
    if any two corresponding elements in the groups are not the same
    
Intermediate translations:
  1. two groups -> two slices of nums
    start:
      from index 0 to len - 1
    end:
      from index nums.length - len to nums.length-1
  2. corresponding indexes:
    start:
      index i
    end
    index nums.length - len + i
  corresponding elements:
    start:
      nums[i]
    end:
      nums[nums.length - len + i]

Solution:
  for each element at the start of nums using index i from 0 to len-1
    return false if the element is not the same as its corresponding element
          at the end of nums
  return true
      
*/
