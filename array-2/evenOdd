Return an array that contains the exact same numbers as the given array, but rearranged so that all the even numbers come 
before all the odd numbers. Other than that, the numbers can be in any order. 
You may modify and return the given array, or make a new array.

evenOdd([1, 0, 1, 0, 0, 1, 1]) → [0, 0, 0, 1, 1, 1, 1]
evenOdd([3, 3, 2]) → [2, 3, 3]
evenOdd([2, 2, 2]) → [2, 2, 2]

public int[] evenOdd(int[] nums) {
  /*
    returns a modified array by swapping all the even values to the front and 
    odd values to the back in no order
  */
  
 for (int i=0; i <= nums.length - 1; i++){
   // start at the front looking for odd elements
   if (nums[i] % 2 != 0){
     // find next even
     for (int j=i+1; j <= nums.length - 1; j++){
       if (nums[j] % 2 == 0){
         // swap 
         int temp = nums[j];
         nums[j] = nums[i];
         nums[i] = temp;
       }
     }
   }
 }
  
  return nums;
}


/*
Translation of description:
  evenOdd takes an int array nums, modifies it and returns it by swapping
  all the even values to the front and odd values to the back in no order
  
Intermediate translation:
  - for each element in nums, it repeats the following:
  1. identifies the location of the next element in the front that is odd
     nums[i] % 2 != 0
  2. then it finds the location of the next even
     nums[j] % 2 == 0
  3. it swaps the values at those two locations
     nums[i] is even and nums[j] is odd
  
Solution:
  for each element in nums from index i=0 to nums.length-1
    if element is odd
      finds the index of the next even
      swaps the values at those two locations
      
*/
