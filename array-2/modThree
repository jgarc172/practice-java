Given an array of ints, return true if the array contains either 3 even or 3 odd values all next to each other.

modThree([2, 1, 3, 5]) → true
modThree([2, 1, 2, 5]) → false
modThree([2, 4, 2, 5]) → true

public boolean modThree(int[] nums) {
  /*
    return true if the array contains either 3 even or 3 odd values 
      all next to each other
  */
  
  int lastIndex = nums.length - 3;
  boolean has3even = false;
  boolean has3odd = false;
  int even;
  int odd;
  // in the nums array from 0 to lastIndex
  for (int i=0; i <= lastIndex; i++){
    even = 0;
    odd = 0;
    // for each group of 3 elements
    for (int j=0; j < 3; j++){
      int element = nums[i+j];
      if (element % 2 == 0 ){
        even++;
      } else {
        odd++;
      }
    }
    
    if (even == 3){
      has3even = true;
    }
    if (odd == 3){
      has3odd = true;
    }
  }
  return has3even || has3odd;
}

/*
Translated description:
  modThree takes an int array and returns a boolean
  
  true: when three adjacent elements are all even or all odd
  false; otherwise
  
Intermediate translations:
  - access three element in the array at a time using index i
  - this could be done in a nested loop of three elements using index j
  - an element is even -> nums[i+j] % 2 == 0
  - an element is odd -> nums[i+j] % 2 != 0
  - increment counts odd and even
  - test for odd is 3 or even is 3

Array and subarray (slice, group):
  outer loop of nums array starts at index 0 to length - 3
  inner loop of group of three elements at index j = i, i+1, i+2

Solution:
  initialize counters even and odd to 0
  initiliaze booleans has3even and has3odd to false
  for each group of 3 elements in the array from i = 0 to length - 3
    for each element in group
      if element is even increment even
      if element is odd increment odd
    if even is 3, has3even is true, 
    if odd is 3, has3odd is true
  return true if has3even or has3odd
  

  
*/
