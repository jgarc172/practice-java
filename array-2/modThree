public boolean modThree(int[] nums) {
  /*
    return true if the array contains either 3 even or 3 odd values 
      all next to each other
  */
  
  int lastIndex = nums.length - 3;
  boolean has3even = false;
  boolean has3odd = false;
  int even;
  int odd;
  // in the nums array from 0 to lastIndex
  for (int i=0; i <= lastIndex; i++){
    even = 0;
    odd = 0;
    // for each group of 3 elements
    for (int j=0; j < 3; j++){
      int element = nums[i+j];
      if (element % 2 == 0 ){
        even++;
      } else {
        odd++;
      }
    }
    
    if (even == 3){
      has3even = true;
    }
    if (odd == 3){
      has3odd = true;
    }
  }
  return has3even || has3odd;
}

/*
Solution from function name:
  modThree is boolean
  
Solution from description:
  return true if . . .
  else return false
  
Given:
  an array of ints nums
  
Constraints:
  true if the array contains either 3 even or 3 odd values all next to each other
  
Intermediate translations:
  array contains -> read the values in the array
  read a value -> nums[i] where i is 0 to end of array
  contains even -> nums[i] is even -> nums[i] % 2 == 0
  contains odd -> not even -> nums[i] % 2 != 0
  contains three even next to each other -> nums[i], nums[i+1], nums[i+2] are even
  same for three odd
  
Array and subarray (slice, group):
  nums array starts at index 0 to length - 1
  group of three elements -> at index i, i+1, i+2
  read three elements at a time:
    start at index 0 and 
    stop 2 elements before the last element -> length - 3
  
Solution:
  for each group of 3 elements in the array from 0 to length - 3
     if 3 elements are even has3even is true, 
     if 3 element are odd, has3odd is true
  return true if has3even or has3odd
  
Intermediate translations of solution:
  in the array from 0 to length - 3 -> outer loop 
  for each group of 3 -> inner loop
  
*/
