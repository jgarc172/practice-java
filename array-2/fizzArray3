Given start and end numbers, return a new array containing the sequence of integers from start up to but not including end, so start=5 and end=10 yields {5, 6, 7, 8, 9}. The end number will be greater or equal to the start number. Note that a length-0 array is valid. (See also: FizzBuzz Code)

fizzArray3(5, 10) → [5, 6, 7, 8, 9]
fizzArray3(11, 18) → [11, 12, 13, 14, 15, 16, 17]
fizzArray3(1, 3) → [1, 2]

public int[] fizzArray3(int start, int end) {
  /*
    return a new array containing the sequence of integers 
      from start up to but not including end,
  */
    int[] result = new int[end - start];
    int lastIndex = result.length - 1;
    for (int i=0; i <= lastIndex; i++){
      result[i] = i + start;
    }

  return result;
}

/*
Translated description:
  fizzArray3 takes two int numbers, start and end, and returns an array of int
  containing the values in sequence, the first element has the value start, and 
  the last element has the value end - 1
  

  
Intermediate translations of restrictions:
  - length of new array -> end - start
  - first element has value start -> nums[0] is assigned start value
  - values in sequence -> for each index in array, the value is i + start
      
Solution with restrictions:
  create a new array of length end - start
  for each element in the array from index i=0 to length - 1
    assign the i + start value to the element
  return new array

*/
