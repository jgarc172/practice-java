public boolean twoTwo(int[] nums) {
  /*
    return true if every 2 that appears in the array is next to another 2
    return false when a 2 appears and there are no adjacent elements or 
           adjacent elements are not 2
  */
  
  // no adjacent elements
  if (nums.length == 1 && nums[0] == 2){
      return false;
  }
  // only two elements are not both 2
  if (nums.length == 2 && !(nums[0] == 2 && nums[1] == 2)){
      return false;
  }

  int lastIndex = nums.length - 2;
  for (int i=1; i <= lastIndex; i++){
    // adjacent elements are not 2
    if (nums[i] == 2 && nums[i+1] != 2 && nums[i-1] != 2){
      return false;
    }
    // last element is a 2 by itself
    if (i == lastIndex && nums[i] != 2 && nums[i+1] == 2){
      return false;
    }
  }
  
  return true;
}


/*
Translated description:
  twoTwo takes an int array and returns a boolean
  
  true: if an element is a 2 and an element adjacent to it must be a 2
  false: otherwise -> if an element is a 2 and both elements adjacent to it 
                      are not a 2
  
Intermediate translations:
  1. adjacent -> element before and element after
  2. must access every element in the array to test if element is 2
     from index 0 to length-1
  3. must access a triple of elements to test if element before or after is a 2
     from index 1 to length-2
  4. if array length is < 3, special cases
length    nums       
  0                true, default
  1       [ ]      false if element is a 2
  2       [ ][ ]   true if both elements are 2
> 2       [ ][ ][ ][ ]   test element before and after
              i
  4. last 2 elements is a special case 

> 2       [ ][ ][ ][ ]   false if last is 2 and last-1 is not 2
                 i  
  
Solution:
  return false if length is 1 and element is 2
  return false if length is 2 and both elements are not 2
  for each triple  elements in array from index 1 to last index (length - 2)
    if element is 2, return false if none of the adjacent elements is a 2 
    test last pair
      return false if last is not a 2 and last+1 is  2
  return true
  
*/
