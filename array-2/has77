Given an array of ints, return true if the array contains two 7's next to each other, or there are two 7's separated by one element, such as with {7, 1, 7}.

has77([1, 7, 7]) → true
has77([1, 7, 1, 7]) → true
has77([1, 7, 1, 1, 7]) → false

public boolean has77(int[] nums) {
  /*
   return true if the array contains two 7's next to each other, 
    or there are two 7's separated by one element
  */
  
  int lastIndex = nums.length - 3;
  for (int i=0; i <= lastIndex; i++){
    if (nums[i] == 7 && nums[i+1] == 7  ||
        nums[i+1] == 7 && nums[i+2] == 7 ||
        nums[i] == 7 && nums[i+2] == 7){
      return true;
    }
  }
  
  return false;
}

/*
Solution from function name:
  has77 is given an int array and returns a boolean
    
Translated description:
  return true if, for any three contiguous elements in the array, there are
    two 7's next to each other or there are two 7's separated by one element
    

Intermediate translations:
  - access three elements at a time to test for conditions, from index 0
    to nums.length - 3
  - contains two 7s next to each other -> 
    nums[i] == 7 and nums[i+1] == 7 or nums[i+1] == 7 and nums[i+2] == 7
  - contains two 7's separated by one element -> nums[i] == 7 and nums[i+2] == 7

Solution:
  for each pair or triple of elements in the array (0 to length - 3)
    return true if it matches the following cases:
      nums[i] is 7 and nums[i+1] is 7 or 
      nums[i+1] is 7 and nums[i+2] is 7 or
      nums[i] == 7 and nums[i+2] == 7
  return false
  
*/
