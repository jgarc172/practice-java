public boolean haveThree(int[] nums) {
  /*
    return true if the value 3 appears in the array exactly 3 times, 
      and no 3's are next to each other
  */
  int count3 = 0;
  int lastIndex = nums.length - 2;
  for (int i=0; i <= lastIndex; i++){
    if (nums[i] == 3 && nums[i+1] != 3){
      count3++;
    }
    if (i == lastIndex){
        if (nums[i+1] == 3){
          count3++;
        }
    }
  }
  return count3 == 3;
}

/*
Solution from function definition:
  haveThree takes an int array and return a  boolean
  
Given:
  an array of ints nums
  
Translations:
  there is a property in the array nums that makes it true; otherwise false
  
Solution from description without constraints:
  return false 
  
Restrictions:
  1. true if the value 3 appears in the array exactly 3 times
  2. no 3s are next to each other
  3. false otherwise
  
Intermediate translations:
  1. use a counter to count the appearances of 3
     iterate the array one element at a time to test the condition
     i=0 to length-1
  2. iterate the array two elements at a time to test the condition
     i=0 to length-2
  1 and 2
    last element cannot be reached by the iteration 2, this is a special case

Enhanced translations:
  1a. value 3 appears -> nums[i] == 3
  1b. value appears 3 times -> increment a count when value 3 appears
  2a. values next to each other -> values nums[i] and nums[i+1]
  2b. no 3s are next to each other -> true when nums[i] is 3 and nums[i+1] is not 3

Solution from description:
  return true if the value 3 appears in the array exactly 3 times, 
    and no 3's are next to each other

Translated Solution:
  count3 is 0
  for each pair of elements in array from i=0 to last index (length - 2)
    increment count3 if nums[i] is 3 and nums[i+1] is not 3
    if last index, increment count3 if nums[i+1] is 3
  return true if count3 is 3
  
*/
