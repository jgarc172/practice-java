Given an array of ints, return true if the value 3 appears in the array exactly 3 times, and no 3's are next to each other.

haveThree([3, 1, 3, 1, 3]) → true
haveThree([3, 1, 3, 3]) → false
haveThree([3, 4, 3, 3, 4]) → false

public boolean haveThree(int[] nums) {
  /*
    return true if the value 3 appears in the array exactly 3 times, 
      and no 3's are next to each other
  */
  int count3 = 0;
  int lastIndex = nums.length - 2;
  for (int i=0; i <= lastIndex; i++){
    if (nums[i] == 3 && nums[i+1] != 3){
      count3++;
    }
    if (i == lastIndex){
        if (nums[i+1] == 3){
          count3++;
        }
    }
  }
  return count3 == 3;
}

/*
Translated description:
  haveThree takes an int array and returns a boolean
  
  true: there are exactly three elements that are 3 and
        there are no pair of elements that are 3
  false: otherwise
  
Intermediate translations:
  1. access all the elements from index 0 to length-1 to test if a value is 3
  2. access pairs of elements from index 0 to length-2 to test if 3s are next
     to each other
  3. use a counter to count the appearances of 3
  1 and 2
    last element cannot be reached by the iteration 2, this is a special case

Solution:
  count3 is 0
  for each pair of elements in array from i=0 to last index (length - 2)
    increment count3 if nums[i] is 3 and nums[i+1] is not 3
    if last index, increment count3 if nums[i+1] is 3
  return true if count3 is 3
  
*/
