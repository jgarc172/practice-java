public int[] swapEnds(int[] nums) {

  // solution:
  // if length is at least 2, swap first element and last element
  // return modified array
  
  if (nums.length > 1){// swap
    int first = nums[0];
    nums[0] = nums[nums.length-1];
    nums[nums.length-1] = first;
  }
  
  return nums;
}

  // solution from description:
  // return the modified array
  // by swapping the first and last elements in the array
  
  // improve the description to better visualize:
  // Given an array of ints -> int[] nums
  // array nums -> nums[0], nums[1], . . . nums[last]
  // indices of array -> 0,1,...,last
  // we don't know "last" but can be calculated -> last = length of array - 1
  // values of array are integers, but are unknown and not important
  // positions (indices) are important -> 0 and last
  // first and last elements in nums -> nums[0] and nums[last]
  
  // describe original array and modified array
  // original array -> first + middle + last
  // modified array -> last + middle + first
  
  // translations to pseudocode or code:
  // array length -> nums.length
  // array length at least 1 -> nums.length >= 1
  // first index -> 0
  // first element -> nums[0]
  // last index -> nums.length - 1
  // last element -> nums[nums.length - 1]
  // swap two variables a and b -> 
  // temp = a;
  // a = b;
  // b = temp;
  
  // arriving at the solution:
  // original array -> first + middle + last
  // modified array -> last + middle + first
  // modified array -> nums[last] + middle + nums[0]
  // if there are no middle elements, then need at least 2 elements to swap
