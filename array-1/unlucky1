public boolean unlucky1(int[] nums) {
  /*
    Return true if 13 appears in first two positions or two last positions 
  */
  
  int last = nums.length - 1;
  boolean unlucky = false;

  for (int i=0; i <= nums.length - 2; i++){
    if (i == 0 || i == 1 || i == last-1){
      if (nums[i] == 1 && nums[i+1] == 3){
        unlucky = true;
      }
    }
  }
  
  return unlucky;
}

/*
Solution from description:
  Return true if the given array contains an unlucky 1 
  in the first 2 or last 2 positions in the array
  
Intermediate translations:
  unlucky 1 -> a 1 immediately followed by a 3 in an array -> 13
  1 and 3 -> is a pair of values in positions i and i+1
  first 2 positions -> indices 0 and 1
  last 2 positions -> indices last-1 and last
  last -> last index -> length - 1
  pair 13 in first two positions -> located at index 0 or at index 1
  pair 13 in last two positions -> located at index last-1
  
Arrays and its slices as pair of indices:
  an array starts from index 0 to its last index
  pair of values can be interpreted as a small slice of array from
    index i to index i+1
  such a pair  starts from index 0 but ends at index 1 less than last index
  example array of length 10 and pair ^ ^:
    0,1,2,3,4,5,6,7,8,9
    ^ ^             ^ ^
      ^ ^

Solution:
  iterate the array using the index i, 
  index i starts from 0 to 1 less than the last element (length - 2)
  test if pair of values is 1 and 3, at indices 0,1, and 1 less than last position

*/
