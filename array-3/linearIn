Given two arrays of ints sorted in increasing order, outer and inner, return true if all of the numbers in inner appear in outer. The best solution makes only a single "linear" pass of both arrays, taking advantage of the fact that both arrays are already in sorted order.

linearIn([1, 2, 4, 6], [2, 4]) → true
linearIn([1, 2, 4, 6], [2, 3, 4]) → false
linearIn([1, 2, 4, 4, 6], [2, 4]) → true

public boolean linearIn(int[] outer, int[] inner) {
  /*
    return false if any of the numbers in inner don't appear in outer
  */
  
  int j = 0;
  for (int i=0; i <= inner.length-1; i++){
    // search in outer starting where j left off
    for (; j < outer.length; j++){
      if (inner[i] == outer[j]){
        break;
      }
    }
    // an inner number did not appear in outer
    if (j == outer.length){
      return false;
    }
  }  
  
  return true;
}

/*
Translated description:
  linearIn takes two arrays of ints sorted in increasing order, outer and inner,
  and it returns a boolean
  
  true: if all of the numbers in inner appear in outer
  false: if any of the numbers in inner don't appear in outer
  
Intermediate translations:
  - for each element in inner, repeat the following
  - for each element in outer, repeat the following
  1. when a number in inner appears in outer, continue with the next inner number
       inner[i] == outer[j]
  2. when the outer index reaches its length, an inner number did not appear in
     outer. return false
       j == outer.length
  - return true
  
Last match:
  index j points to the last match and splits the outer array: elements to the
  left of j have already been searched; elements to the right of j are yet to be
  searched.
  
An inner number not found in outer:
  an inner number was not found when j reached its length, outer.length.

Solution:
  initialize index j to 0
  for each element in inner using index i=0 to inner.length-1
    for each element in outer using index j to outer.length-1
      if inner element is the same as outer element
        break and continue with the next inner element, starting at j
    if j is outer.length
      one of the inner elements was not found
      return false
  return true
  
*/
