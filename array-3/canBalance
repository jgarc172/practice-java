Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is 
equal to the sum of the numbers on the other side.

canBalance([1, 1, 1, 2, 1]) → true
canBalance([2, 1, 1, 2, 1]) → false
canBalance([10, 10]) → true

public boolean canBalance(int[] nums) {
  /*
    return true when the sum of some front elements is equal to the sum of all the 
    remaining elements
    
    frontSum == remainingSum && j == nums.length-1
  */
 
  int frontSum = 0;
  int remainingSum = 0;
  int j;
  
  for (int i=0; i <= nums.length-1; i++){
    frontSum += nums[i];
    
    remainingSum = 0;
    for (j=i+1; j <= nums.length-1; j++){
      remainingSum += nums[j];
      if (frontSum <= remainingSum){
        break;
      }
    }
    
    if (frontSum == remainingSum && j == nums.length-1){
      return true;
    }
  }
  
  return false; 
}

/*
Translated description:
  canBalance takes an int array and returns a boolean
  
  true: when the sum of some front elements is equal to the sum of all the 
        remaining elements
  false: otherwise
  
Intermediate translations:
  - initialize frontSum and remainingSum to 0
  - for each element in nums, repeat the following
  1. add the element to the frontSum
       frontSum += nums[i]
       reset remainingSum to 0
  - for each element in the remaining part of nums, repeat the following
  2. add the element to the remainingSum
       remainingSum += nums[j]
  3. break the nested loop when remainingSum is already greater than frontSum
     or both are equal
  4. return true when all the remaining elements have been reached and
     the frontSum is equal to remainingSum
  - otherwise return false
  
Front elements and Remaining elements:
  index j points to the current split of the array: elements to the
  left of j have been added to frontSum; elements to the right of j will be 
  added to remainingsum and will be compared with frontSum.

nums    [L] [L] [R] [R] [R]
             i   j
             
Remaining elements:
  adding elements to the remainingSum continues until the sum is unnecessarily
  greater than the frontSum or the sums are equal.

Solution:
  initialize frontSum and remainingSum to 0
  for each element in nums using index i=0 to inner.length-1
    add the element to frontSum
    for each element in the remaining nums using index j=i+1 to outer.length-1
      add the element to remainingSum
      if remainingSum is unnecessarily greater than frontSum or equal to frontSum
        break and try another slice of front and remaining
    if all the remaining elements have been reached and the frontSum is equal 
    to remainingSum
      return true
  return false
  
*/
