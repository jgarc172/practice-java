(This is a slightly harder version of the fix34 problem.) Return an array that contains exactly the same numbers as the 
given array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number 
may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this 
version, 5's may appear anywhere in the original array.

fix45([5, 4, 9, 4, 9, 5]) → [9, 4, 5, 4, 5, 9]
fix45([1, 4, 1, 5]) → [1, 4, 5, 1]
fix45([1, 4, 1, 5, 5, 4, 1]) → [1, 4, 5, 1, 1, 4, 5]

public int[] fix45(int[] nums) {
  /*
    return nums rearranged so that every 4 is immediately followed by a 5
  */
  
  int next5 = 0;
  for (int i=0; i <= nums.length-2; i++){
    if (nums[i] == 4 && nums[i+1] != 5){
      while (next5 <= nums.length-1){
        if (next5 == 0 && nums[next5] == 5){
          swap(nums, i+1, next5);
          break;
        }
        if (nums[next5] == 5 && nums[next5-1] != 4){
          swap(nums, i+1, next5);
          break;
        }
          next5++;
      }
    }
  }
  return nums;
}

public void swap(int[] nums, int i, int j){
  /*
    swap values at locations i and j in array
  */
  int temp = nums[i];
  nums[i] = nums[j];
  nums[j] = temp;
}

/*
Translated description:
  fix45 takes an int array nums and returns it rearranged so that every 4 is
  immediately followed by a 5, by moving the next available 5 after each 4
  
Intermediate translations:
  - for each two elements in nums, repeat the following:
  1. identify a pair, 4 followed by a non 5
       nums[i] == 4 and nums[i+1] != 5
  2. identify the location of the next available 5 in the remaining subarray of nums
       nums[j] == 5 && nums[j-1] != 4
  3. swap the values at locations i+1 and j
  
Next available 5:
  index j splits the nums array: 5s that are to the left of j are already placed
  next to a 4; 4s that are to the right of j are available for placement only if
  if it not already next to a 4

Solution:
  initialize index j to 0
  for each pair of elements in nums using index i=0 to nums.length-2
    if nums[i] == 4 and nums[i+1] != 5
      for each element in nums using index j to nums.length-1
        if nums[j] == 5 and nums[j-1] != 4
          swap the values at locations i+1 and j
          break
        increment j
  return nums.
*/
