Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately 
followed by a 4. Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's, 
every 3 has a number after it that is not a 3, and a 3 appears in the array before any 4.

fix34([1, 3, 1, 4]) → [1, 3, 4, 1]
fix34([1, 3, 1, 4, 4, 3, 1]) → [1, 3, 4, 1, 1, 3, 4]
fix34([3, 2, 2, 4]) → [3, 4, 2, 2]

public int[] fix34(int[] nums) {
  /*
    return nums rearranged so that every 3 is immediately followed by a 4
  */
  
  int next4 = 0;
  for (int i=0; i <= nums.length-2; i++){
    if (nums[i] == 3 && nums[i+1] != 4){
      while (next4 <= nums.length-1){
        if (nums[next4] == 4){
          int temp = nums[i+1];
          nums[i+1] = nums[next4];
          nums[next4] = temp;
          break;
        }
          next4++;
      }
    }
  }
  return nums;
}

/*
Translated description:
  fix34 takes an int array nums and returns it rearranged so that every 3 is
  immediately followed by a 4, by moving the next availabe 4 after each 3
  
Intermediate translations:
  - for each two elements in nums, repeat the following:
  1. identify a pair, 3 followed by a non 4
       nums[i] == 3 and nums[i+1] != 4
  2. identify the location of the next available 4 in the remaining subarray of nums
       nums[j] == 4
  3. swap the values at locations i+1 and j
  
Next available 4:
  index j splits the nums array: 4s that are to the left of j are already placed
  next to a 3; 4s that are to the right of j are available for placement 

Solution:
  initialize index j to 0
  for each pair of elements in nums using index i=0 to nums.length-2
    if nums[i] == 3 and nums[i+1] != 4
      for each element in nums using index j to nums.length-1
        if nums[j] == 4 and nums[j-1] != 3
          swap the values at locations i+1 and j
          break
        increment j
  return nums.
*/
