public int maxSpan(int[] nums) {
  /*
    Returns the largest span found in the given array
  */
  int max = 0;
  for (int i=0; i <= nums.length-1; i++){
    int last = lastIndexOf(nums, nums[i]);
    int span = span(i, last);
    if (span > max){
      max = span;
    }
  }
  
  return max;
}

public int lastIndexOf(int[] nums, int value){
  int last = -1;
  for (int i = nums.length-1; i >= 0; i--){
    if (nums[i] == value){
      last = i;
      break;
    }
  }
  return last;
}

public int span(int a, int b){
  if (b < 0){
    return 1;
  }
  return b - a + 1;
}

/*
Solution from function definition:
  maxSpan takes an int array and returns a number

Given:
  an int array nums
  
Solution from description without restrictions:
  return a default int value, 0 as the max span
  
Restrictions: 
  1. for each value, consider the leftmost and rightmost appearance of it
  2. a span is the number of elements between the two inclusive 
  3. a single value has a span of 1
  4. find the largest span in the array and return it
  
Intermediate translations:
  1. the leftmost position is the first occurrance from the left, index 0
     the rightmost position is the first occurrance from the right, lastIndex
  2. the span is the difference of the two positions plus 1, right - left + 1
  3. left is equal to right, the span is 1
  4. keep track of the current maximum span found, replace it if find a larger span
  
Solution with restrictions:
  define a function lastIndexOf that returns the last index of the element given
  define a function span that calculates the span
  initialize max to 0
  for each element in nums
    get the value's last index
    calculate its span
    if the span is > than max, replace max with it
  return max.
*/
