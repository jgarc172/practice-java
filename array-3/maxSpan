Consider the leftmost and righmost appearances of some value in an array. We'll say that the "span" is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.)

maxSpan([1, 2, 1, 1, 3]) → 4
maxSpan([1, 4, 2, 1, 4, 1, 4]) → 6
maxSpan([1, 4, 2, 1, 4, 4, 4]) → 6

public int maxSpan(int[] nums) {
  /*
    Returns the largest span found in the given array
  */
  int max = 0;
  for (int i=0; i <= nums.length-1; i++){
    for (int j=nums.length-1; j >= 0; j--){
      if (nums[j] == nums[i]){
        int span = j - i + 1;
        if (span > max){
          max = span;
        }
      }
    }
  }
  
  return max;
}

/*
Translated description:
  maxSpan takes an int array nums and returns as an int the maximum span
  in the nums array, where the span is the number of elements between the 
  leftmost location of a value and the rightmost location of the same value. A 
  single value in the array has a span of 1.
  
Intermediate translations:
  1. identify the leftmost location of a value starting from index i=0  and 
     increasing to nums.length-1
       for value nums[i] the location is i
  2. identify the rightmost location of the same value starting from index 
     j=nums.length-1 and decreasing to 0
       if nums[j] == nums[i] the rightmost location is j
  3. the span is the number of locations in between, inclusive
       j - i + 1
  4. the maximum span can be tracked in a variable max and its value updated
     as larger spans are found

Solution:
  initialize max to 0
  for each element in nums using index i=0 to nums.length-1
    for each element in nums using index j=nums.length-1 to 0
      if the two elements are the same
        calculate its span using their indexes
        if the span is greater than max, replace max with it
  return max.
*/
