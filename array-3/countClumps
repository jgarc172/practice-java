Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps 
in the given array.

countClumps([1, 2, 2, 3, 4, 4]) → 2
countClumps([1, 1, 2, 1, 1]) → 2
countClumps([1, 1, 1, 1, 1]) → 1

public int countClumps(int[] nums) {
  /*
    return the count of series of 2 or more elements of the same value
  */
  
  int lastIndex = nums.length-1;
  int clumps = 0;
  
  for (int i=0; i <= lastIndex-1; i++){
    // beginning of series
    if (nums[i] == nums[i+1]){
      clumps++;
      int j;
      for (j=i+1; j <= lastIndex-1; j++){
        // end of series
        if (nums[j] != nums[j+1]){
          break;
        }
      }
      i=j;
    }
  }
  return clumps;
}

/*
Translation of description:
  countClumps takes an int array nums and returns the count of series of 2 or
  more adjacent elements of the same value (clumps)
  
Intermediate translation:
  - initializes clumps to 0
  - for each two elements in nums, it repeats the following:
  1. identifies the beginning of the series and increments clumps
     nums[i] == nums[i+1]
     clumps++
  - for each two elements in nums, beginning at i+1, it repeats the following:
  2. identifies the location of the end of the series, and exits the nested loop
     nums[j] != nums[j+1]
     break
  3. it moves the index of the outer loop
     i=j
  - returns the clumps
  
Solution:
  initialize clumps to 0
  for each pair of elements in nums from index i=0 to nums.length-2
    if pair elements are the same
      increments clumps
      for each pair of elements in nums from index j=i+1 to nums.length-2
        finds the index where pairs are not the same
        exits the nested loop
      moves the i index to last value of j
  returns clumps
      
*/
