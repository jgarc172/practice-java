public int countClumps(int[] nums) {
  /*
    return the count of series of 2 or more elements of the same value
  */
  
  int lastIndex = nums.length-1;
  int clumps = 0;
  boolean inClump = false;
  for (int i=0; i <= lastIndex-1; i++){
    if (nums[i] == nums[i+1]){
        if (!inClump){
          clumps++;
          inClump = true;
        }
      } else {
        inClump = false;
      }
  }
  return clumps;
}

/*
Solution from function definition:
  countClumps takes an int array and returns an int value as the count of clumps
  
Given:
  an int array nums
  
Solution from description without restrictions:
  return an int
  
Restrictions:
  1. return the numbers of clumps in the given array
  2. a clump is a series of 2 or more adjacent elements of the same value
  
Intermeditate definitions:
  1. use a counter and increment it when a clump is observed
  2a. adjacent elements -> elements at i and i+1
  2b. same value -> true when nums[i] == nums[i+1]
  2c. 2 or more elements -> don't increase the counter when series is longer
      than 2
  3.  when accessing two elements at a time, and the index starts at 0,
      the loop ends at 1 element before the last index
      -> i=0 to i <= last index - 1
 i    0                V
nums [ ][ ][ ][ ][][ ][ ][ ]
     [ ][ ]           [ ][ ]
  
Solution with restrictions:
  initialize clumps to 0
  initialinq inClump to false
  for each pair of elements in nums
    compare the two elements
      if the elements are the same and not inClump
        increment the counter
        set inClump to true
      else set inClump to false
  return clumps
  

*/
