Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..str.length()-1 inclusive).

missingChar("kitten", 1) → "ktten"
missingChar("kitten", 0) → "itten"
missingChar("kitten", 4) → "kittn"

public String missingChar(String str, int n) {
  /*
    returns a new string that contains the same characters in str but 
    without the character at location n, by adding together the
    substring before location n and the substring after location n.
  */
  
  return str.substring(0, n) + str.substring(n + 1, str.length());
  
}

/*
Translated description:
  missingChar takes a string str and an int n, and returns a new string that
  contains the same characters in str but without the character at location n,

Intermediate translations:
  - a new string can be formed by adding substrings from str -> str.substring(a,b)
  - removing a character at location 3 -> form a new string by not including 
    character at location 3
    -> substring from 0 to 2 and substring from 4 to the end
  Example:
  str is "kitten" and n is 3
  str -> "kit" + "t" + "en" -> str.substring(0,3) + "t" + str.substring(4, 5)
  new string -> "kiten" -> str.substring(0,3) + str.substring(4,5)
  new string -> str.substring(0,n) + str.substring(n+1, str.length)
  
Solution:
  return the string formed from 
  str.substring(0,n) + str.substring(n+1, str.length)
  
*/
